#!/usr/bin/env python3
"""
Script completo para compara√ß√£o de defesas em Federated Learning.
Este script foi refatorado para separar a execu√ß√£o da an√°lise.
- ExperimentRunner: Lida com a gera√ß√£o de configura√ß√µes e execu√ß√£o de simula√ß√µes.
- ResultAnalyzer: Lida com o carregamento, an√°lise e visualiza√ß√£o de resultados.
"""

import os
import sys
import yaml
import json
import time
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from datetime import datetime
import numpy as np
import argparse
import re

# Adicionar diret√≥rio raiz ao path, se necess√°rio
# (Assumindo que fl_simulator est√° no mesmo diret√≥rio ou no PYTHONPATH)
# sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importe o simulador (certifique-se de que o import funcione no seu ambiente)
try:
    from fl_simulator import FLSimulator
except ImportError:
    print("AVISO: N√£o foi poss√≠vel importar FLSimulator. O modo de execu√ß√£o n√£o funcionar√°.")
    FLSimulator = None


def slugify(text):
    """Converte um texto para um formato 'slug' seguro para nomes de arquivos."""
    text = text.lower()
    text = re.sub(r'\s+', '_', text)  # Substitui espa√ßos por underscores
    text = re.sub(r'[^\w\-]+', '', text) # Remove caracteres n√£o alfanum√©ricos
    return text


class ResultAnalyzer:
    """
    Classe para carregar, analisar e visualizar resultados de experimentos.
    """
    def __init__(self, simulation_dir):
        """
        Inicializa o analisador com o diret√≥rio base da simula√ß√£o.

        Args:
            simulation_dir (str or Path): O diret√≥rio da simula√ß√£o contendo a pasta 'results'.
        """
        self.base_dir = Path(simulation_dir)
        self.results_dir = self.base_dir / 'results'
        self.plots_dir = self.base_dir / 'plots'
        self.plots_dir.mkdir(parents=True, exist_ok=True)

        if not self.results_dir.exists():
            raise FileNotFoundError(f"Diret√≥rio de resultados n√£o encontrado: {self.results_dir}")

        self.all_results = {}
        self.metadata = {}
        print(f"üìä Analisador iniciado para o diret√≥rio: {self.base_dir}")

    def load_results(self):
        """
        Carrega os resultados a partir de um arquivo de resumo JSON ou varrendo os diret√≥rios.
        """
        summary_file = self.results_dir / 'complete_results.json'
        if summary_file.exists():
            print(f"üìÑ Carregando resultados do arquivo de resumo: {summary_file}")
            with open(summary_file, 'r') as f:
                summary_data = json.load(f)
            self.all_results = summary_data.get('results', {})
            self.metadata = summary_data.get('experiment_info', {})
            print(f"‚úÖ {len(self.all_results)} resultados carregados.")
        else:
            print("‚ö†Ô∏è Arquivo de resumo n√£o encontrado. Varrendo diret√≥rios de experimentos...")
            for exp_dir in self.results_dir.iterdir():
                if exp_dir.is_dir():
                    metrics_file = exp_dir / 'metrics.json'
                    config_file = exp_dir / 'config.yaml'

                    if metrics_file.exists() and config_file.exists():
                        try:
                            with open(metrics_file, 'r') as f:
                                metrics = json.load(f)
                            with open(config_file, 'r') as f:
                                config = yaml.safe_load(f)
                            
                            malicious_clients = []
                            malicious_file = exp_dir / 'malicious_clients.json'
                            if malicious_file.exists():
                                with open(malicious_file, 'r') as f:
                                    malicious_data = json.load(f)
                                    malicious_clients = malicious_data.get('malicious_clients', [])

                            # Extrai metadados do config.yaml
                            exp_name = config.get('experiment', {}).get('name', exp_dir.name)
                            defense_name = "Sem Defesa"
                            if config.get('server', {}).get('defense_pipeline'):
                                defense_name = config.get('experiment', {}).get('defense_name', exp_name.split('_')[2]) # Fallback

                            attack_rate = config.get('clients', {}).get('malicious_percentage', 0.0)
                            sel_frac = config.get('server', {}).get('selection_fraction', 0.0)

                            self.all_results[exp_name] = {
                                'config_path': str(config_file),
                                'defense': defense_name,
                                'attack_rate': attack_rate,
                                'selection_fraction': sel_frac,
                                'malicious_clients': malicious_clients,
                                'metrics': metrics,
                                'final_accuracy': metrics.get('accuracy', [0.0])[-1],
                                'final_loss': metrics.get('loss', [float('inf')])[-1],
                                'success': True,
                            }
                        except Exception as e:
                            print(f"‚ùå Erro ao processar o diret√≥rio {exp_dir.name}: {e}")
            print(f"‚úÖ Varredura conclu√≠da. Encontrados {len(self.all_results)} resultados.")
        
        if not self.all_results:
             print("‚ùå Nenhum resultado para analisar.")
             return False
        return True
    
    def run_full_analysis(self):
        """Executa o pipeline completo de an√°lise: carregar dados, processar e criar plots."""
        if self.load_results():
            # NOVO: Instancia o processador para gerar DataFrame e gr√°ficos
            processor = ResultProcessor(self.all_results, self.plots_dir, self.results_dir)
            processor.generate_and_save_dataframe()
            processor.create_all_plots()
        else:
            print("An√°lise interrompida.")


class ResultProcessor:
    def __init__(self, all_results, plots_dir, results_dir):
        self.all_results = all_results
        self.plots_dir = plots_dir
        self.results_dir = results_dir

    def generate_and_save_dataframe(self):
        """
        Converte os resultados carregados em um DataFrame Pandas e o salva em um arquivo CSV.
        """
        if not self.all_results:
            print("‚ö†Ô∏è Sem dados para criar o DataFrame.")
            return

        all_experiments_data = []
        for exp_id, exp_details in self.all_results.items():
            if not exp_details.get('success', False):
                continue

            metrics = exp_details.get("metrics", {})
            num_rounds = len(metrics.get("rounds", []))

            if num_rounds == 0:
                continue

            # Converte a lista de clientes maliciosos para uma string para f√°cil armazenamento no CSV
            malicious_clients_str = str(exp_details.get("malicious_clients", []))

            for i in range(num_rounds):
                # Usar .get() com um valor padr√£o seguro para evitar erros
                default_list = [None] * num_rounds
                default_bool_list = [False] * num_rounds

                round_data = {
                    "experiment_id": exp_id,
                    "defense": exp_details.get("defense"),
                    "attack_rate": exp_details.get("attack_rate"),
                    "selection_fraction": exp_details.get("selection_fraction"),
                    "malicious_clients": malicious_clients_str,
                    "round": metrics.get("rounds")[i],
                    "accuracy": metrics.get("accuracy")[i],
                    "loss": metrics.get("loss")[i],
                    "aggregation_time": metrics.get("aggregation_time", default_list)[i],
                    "round_time": metrics.get("round_time", default_list)[i],
                    "communication_bytes": metrics.get("communication_bytes", default_list)[i],
                    "selected_clients": str(metrics.get("selected_clients", default_list)[i]),
                    "aggregated_clients": str(metrics.get("aggregated_clients", default_list)[i]),
                    "model_updated": metrics.get("model_updated", default_bool_list)[i],
                    "final_accuracy": exp_details.get("final_accuracy"),
                    "final_loss": exp_details.get("final_loss"),
                    "success": exp_details.get("success"),
                }
                all_experiments_data.append(round_data)

        df = pd.DataFrame(all_experiments_data)
        df_path = self.results_dir / 'results_summary.csv'
        df.to_csv(df_path, index=False)
        print(f"\n‚úÖ DataFrame com {len(df)} linhas salvo em: {df_path}")

    def create_all_plots(self):
        """
        Cria todos os plots de visualiza√ß√£o a partir dos resultados carregados.
        """
        if not self.all_results:
            print("‚ö†Ô∏è Sem dados para plotar. Pulando a cria√ß√£o de gr√°ficos.")
            return

        print("\nüé® Iniciando a cria√ß√£o de todos os gr√°ficos...")

        perf_data = []
        for result in self.all_results.values():
            if result.get('success'):
                common_info = {
                    'defense': result['defense'],
                    'attack_rate': result['attack_rate'],
                    'selection_fraction': result['selection_fraction'],
                    'final_accuracy': result.get('final_accuracy', 0.0),
                }
                perf_data.append(common_info)

        df_perf = pd.DataFrame(perf_data)
        
        defenses = sorted(df_perf['defense'].unique())
        colors = plt.colormaps.get('tab10').colors
        markers = ['o', 's', '^', 'D', 'v', 'p', '*', '<', '>', 'X']
        defense_styles = {
            defense: {'color': colors[i % len(colors)], 'marker': markers[i % len(markers)]}
            for i, defense in enumerate(defenses)
        }
        
        self._plot_accuracy_vs_attack(df_perf, defense_styles)
        self._plot_performance_heatmap(df_perf)
        self._plot_selection_impact(df_perf, defense_styles)
        self._plot_temporal_evolution(defense_styles)
        self._plot_cost_metrics(defense_styles)
        print("‚úÖ Gr√°ficos criados com sucesso.")


    def _plot_accuracy_vs_attack(self, df, defense_styles):
        """
        Plota a acur√°cia final vs. taxa de ataque para cada fra√ß√£o de sele√ß√£o.
        """
        selection_fractions = sorted(df['selection_fraction'].unique())
        if not selection_fractions: return

        num_plots = len(selection_fractions)
        fig, axes = plt.subplots(1, num_plots, figsize=(8 * num_plots, 6), squeeze=False)
        axes = axes.flatten()

        for i, sel_frac in enumerate(selection_fractions):
            ax = axes[i]
            df_sub = df[df['selection_fraction'] == sel_frac]

            for defense, style in defense_styles.items():
                defense_data = df_sub[df_sub['defense'] == defense].sort_values('attack_rate')
                if not defense_data.empty:
                    ax.plot(defense_data['attack_rate'] * 100, defense_data['final_accuracy'],
                            label=defense, linewidth=2, markersize=7, alpha=0.9, **style)

            ax.set_xlabel('Taxa de Ataque (%)', fontsize=12)
            ax.set_ylabel('Acur√°cia Final', fontsize=12)
            ax.set_title(f'Desempenho (Sele√ß√£o de {int(sel_frac*100)}% dos Clientes)', fontsize=14, fontweight='bold')
            ax.grid(True, linestyle='--', alpha=0.5)
            ax.set_ylim(0, 1.05)
            ax.legend(title='Defesas', fontsize=10)
        
        plt.tight_layout()
        plot_path = self.plots_dir / 'accuracy_vs_attack_rate.png'
        plt.savefig(plot_path, dpi=300, bbox_inches='tight')
        plt.close(fig)
        print(f"üíæ Gr√°fico de Acur√°cia vs Ataque salvo em: {plot_path}")

    def _plot_temporal_evolution(self, defense_styles):
        """
        Plota a evolu√ß√£o da acur√°cia ao longo dos rounds para diferentes cen√°rios.
        """
        attack_rates = sorted(list({r['attack_rate'] for r in self.all_results.values() if r.get('success')}))
        selection_fractions = sorted(list({r['selection_fraction'] for r in self.all_results.values() if r.get('success')}))

        for sel_frac in selection_fractions:
            
            n_attacks = len(attack_rates)
            if n_attacks == 0: continue
            
            cols = min(3, n_attacks)
            rows = (n_attacks + cols - 1) // cols
            fig, axes = plt.subplots(rows, cols, figsize=(7 * cols, 5 * rows), squeeze=False, sharey=True)
            axes = axes.flatten()

            for i, attack_rate in enumerate(attack_rates):
                ax = axes[i]
                
                for exp_name, result in self.all_results.items():
                    if (result.get('success') and
                        result['attack_rate'] == attack_rate and
                        result['selection_fraction'] == sel_frac):
                        
                        metrics = result['metrics']
                        rounds = metrics.get('round', list(range(1, len(metrics.get('accuracy', [])) + 1))) # FLAG: Prioriza a chave 'round' se existir
                        accuracies = metrics.get('accuracy', [])
                        
                        if rounds and accuracies:
                            defense = result['defense']
                            style = defense_styles.get(defense, {})
                            ax.plot(rounds, accuracies, label=defense, linewidth=2, alpha=0.9, **style)

                ax.set_title(f"Ataque: {int(attack_rate*100)}%", fontsize=12, fontweight='bold')
                ax.set_xlabel('Round', fontsize=11)
                ax.set_ylabel('Acur√°cia', fontsize=11)
                ax.grid(True, linestyle='--', alpha=0.5)
                ax.set_ylim(0, 1.05)

            handles, labels = axes[0].get_legend_handles_labels()
            fig.legend(handles, labels, loc='lower center', ncol=min(4, len(handles)), bbox_to_anchor=(0.5, 0), fontsize=11)
            
            for j in range(i + 1, len(axes)):
                axes[j].set_visible(False)

            fig.suptitle(f'Evolu√ß√£o da Acur√°cia (Sele√ß√£o de {int(sel_frac*100)}%)', fontsize=16, fontweight='bold')
            plt.tight_layout(rect=[0, 0.05, 1, 0.95])
            
            plot_path = self.plots_dir / f'temporal_evolution_sel_{int(sel_frac*100)}.png'
            plt.savefig(plot_path, dpi=300, bbox_inches='tight')
            plt.close(fig)
            print(f"üíæ Gr√°fico de Evolu√ß√£o Temporal salvo em: {plot_path}")
    
    def _plot_performance_heatmap(self, df):
        """Cria um heatmap de acur√°cia (Defesa vs. Taxa de Ataque) para cada fra√ß√£o de sele√ß√£o."""
        selection_fractions = sorted(df['selection_fraction'].unique())
        
        for sel_frac in selection_fractions:
            df_sub = df[df['selection_fraction'] == sel_frac]
            if df_sub.empty: continue
            
            pivot_table = df_sub.pivot_table(
                index='defense', columns='attack_rate', values='final_accuracy'
            )
            
            plt.figure(figsize=(12, 8))
            sns.heatmap(
                pivot_table,
                annot=True, fmt=".3f", cmap="RdYlGn",
                linewidths=.5, vmin=0, vmax=1,
                cbar_kws={'label': 'Acur√°cia Final'}
            )
            plt.title(f'Heatmap de Acur√°cia (Sele√ß√£o {int(sel_frac*100)}%)', fontsize=16, fontweight='bold')
            plt.xlabel('Taxa de Ataque (%)', fontsize=12)
            plt.xticks([i + 0.5 for i in range(len(pivot_table.columns))], [f'{int(c*100)}%' for c in pivot_table.columns])
            plt.ylabel('Defesa', fontsize=12)
            plt.tight_layout()
            
            plot_path = self.plots_dir / f'heatmap_performance_sel_{int(sel_frac*100)}.png'
            plt.savefig(plot_path, dpi=300, bbox_inches='tight')
            plt.close()
            print(f"üíæ Gr√°fico de Heatmap salvo em: {plot_path}")

    def _plot_selection_impact(self, df, defense_styles):
        """Plota o impacto na acur√°cia ao mudar a fra√ß√£o de sele√ß√£o de clientes."""
        selection_fractions = sorted(df['selection_fraction'].unique())
        
        if len(selection_fractions) != 2:
            print("‚ö†Ô∏è Gr√°fico de Impacto de Sele√ß√£o pulado (requer exatamente 2 fra√ß√µes de sele√ß√£o).")
            return
            
        frac_low, frac_high = selection_fractions[0], selection_fractions[1]
        
        pivot_low = df[df['selection_fraction'] == frac_low].pivot_table(index='defense', columns='attack_rate', values='final_accuracy')
        pivot_high = df[df['selection_fraction'] == frac_high].pivot_table(index='defense', columns='attack_rate', values='final_accuracy')
        
        # Alinha os dataframes e calcula a diferen√ßa, preenchendo com 0 se um valor faltar
        pivot_diff = pivot_high.subtract(pivot_low, fill_value=0)
        
        plt.figure(figsize=(10, 7))
        for defense in pivot_diff.index:
            style = defense_styles.get(defense, {})
            plt.plot(
                [c * 100 for c in pivot_diff.columns], pivot_diff.loc[defense], 
                label=defense, linewidth=2, markersize=7, alpha=0.9,
                marker=style.get('marker', 'o'), color=style.get('color')
            )
        
        plt.axhline(0, color='black', linestyle='--', alpha=0.7)
        plt.title('Impacto da Sele√ß√£o de Clientes na Acur√°cia', fontsize=16, fontweight='bold')
        plt.xlabel('Taxa de Ataque (%)', fontsize=12)
        plt.ylabel(f'Melhora na Acur√°cia ({int(frac_high*100)}% - {int(frac_low*100)}%)', fontsize=12)
        plt.legend(title='Defesas')
        plt.grid(True, linestyle='--', alpha=0.5)
        plt.tight_layout()
        
        plot_path = self.plots_dir / 'selection_impact.png'
        plt.savefig(plot_path, dpi=300, bbox_inches='tight')
        plt.close()
        print(f"üíæ Gr√°fico de Impacto da Sele√ß√£o salvo em: {plot_path}")

    def _plot_cost_metrics(self, defense_styles):
        """
        Cria boxplots para m√©tricas de custo a partir dos dados brutos em self.all_results.
        Cada boxplot mostra a distribui√ß√£o dos valores de todos os rounds para cada defesa.
        """
        # 1. Preparar os dados em um formato "longo", ideal para o Seaborn
        plot_data = []
        for result in self.all_results.values():
            if not result.get('success'):
                continue

            metrics = result.get('metrics', {})
            base_info = {
                'defense': result['defense'],
                'selection_fraction': result['selection_fraction']
            }

            # Extrai cada valor individual de cada m√©trica de custo
            for metric_name in ['communication_bytes', 'aggregation_time', 'round_time', 'memory_usage']:
                if metric_name in metrics and metrics[metric_name]:
                    for value in metrics[metric_name]:
                        plot_data.append({**base_info, 'metric': metric_name, 'value': value})
        
        if not plot_data:
            print("‚ö†Ô∏è M√©tricas de custo n√£o encontradas nos resultados. Gr√°ficos de custo pulados.")
            return

        df = pd.DataFrame(plot_data)

        color_palette = {defense: style['color'] for defense, style in defense_styles.items()}

        # 2. Iterar sobre cada fra√ß√£o de sele√ß√£o e criar os gr√°ficos
        selection_fractions = sorted(df['selection_fraction'].unique())
        
        for sel_frac in selection_fractions:
            df_sel = df[df['selection_fraction'] == sel_frac]
            if df_sel.empty:
                continue

            # Mapeamento de m√©tricas para t√≠tulos e convers√µes de unidade
            cost_metrics_map = {
                'communication_bytes': {'title': 'Comunica√ß√£o por Round (MB)', 'divisor': 1024*1024, 'ylabel': 'MB'},
                'aggregation_time': {'title': 'Tempo de Agrega√ß√£o (s)', 'divisor': 1, 'ylabel': 'Segundos'},
                'round_time': {'title': 'Tempo Total por Round (s)', 'divisor': 1, 'ylabel': 'Segundos'},
                'memory_usage': {'title': 'Uso de Mem√≥ria (MB)', 'divisor': 1, 'ylabel': 'MB'}
            }
            
            fig, axes = plt.subplots(2, 2, figsize=(16, 12))
            axes = axes.flatten()

            for i, (metric, props) in enumerate(cost_metrics_map.items()):
                ax = axes[i]
                metric_data = df_sel[df_sel['metric'] == metric].copy()
                
                if not metric_data.empty:
                    # Aplica a convers√£o de unidade
                    metric_data['value'] = metric_data['value'] / props['divisor']
                    
                    sns.boxplot(ax=ax, data=metric_data, x='defense', y='value', palette=color_palette, hue='defense')
                    ax.set_title(props['title'], fontsize=14, fontweight='bold')
                    ax.set_xlabel('')
                    ax.set_ylabel(props['ylabel'], fontsize=12)
                    ax.tick_params(axis='x', rotation=45, labelsize=11)
                    ax.grid(True, linestyle='--', alpha=0.5)
                else:
                    ax.text(0.5, 0.5, 'Dados n√£o dispon√≠veis', ha='center', va='center', fontsize=12, color='gray')
                    ax.set_xticks([])
                    ax.set_yticks([])

            fig.suptitle(f'An√°lise de Custo Computacional (Sele√ß√£o {int(sel_frac*100)}%)', fontsize=18, fontweight='bold')
            plt.tight_layout(rect=[0, 0, 1, 0.96])

            plot_path = self.plots_dir / f'cost_metrics_sel_{int(sel_frac*100)}.png'
            plt.savefig(plot_path, dpi=300, bbox_inches='tight')
            plt.close(fig)
            print(f"üíæ Gr√°fico de M√©tricas de Custo salvo em: {plot_path}")
    
    def run_full_analysis(self):
        """Executa o pipeline completo de an√°lise: carregar dados e criar plots."""
        # O m√©todo retorna True se resultados foram carregados, False caso contr√°rio.
        if self.load_results():
            self.create_all_plots()
        else:
            # A mensagem de "Nenhum resultado" j√° √© impressa dentro de load_results.
            print("An√°lise interrompida.")


class ExperimentRunner:
    """
    Classe para gerar configura√ß√µes e executar a simula√ß√£o de experimentos.
    """
    def __init__(self, resume_dir=None):
        # self.defense_pipelines = {
        #     'var 1': { 'client_filters': [{'name': 'L2_DIRECTIONAL_FILTER','params': {'window_size': 7, 'std_dev_multiplier': 1.5, 'min_rounds_history': 7}}],'aggregation_strategy': {'name': 'FED_AVG'},'global_model_filter': {'name': 'L2_GLOBAL_MODEL_FILTER','params': {'window_size': 7, 'std_dev_multiplier': 1.5, 'min_rounds_history': 7}}},
        #     # 'var 2': { 'client_filters': [{'name': 'L2_DIRECTIONAL_FILTER','params': {'window_size': 5, 'std_dev_multiplier': 1.5, 'min_rounds_history': 5}}],'aggregation_strategy': {'name': 'FED_AVG'},'global_model_filter': {'name': 'L2_GLOBAL_MODEL_FILTER','params': {'window_size': 5, 'std_dev_multiplier': 1.5, 'min_rounds_history': 5}}},
        #     # 'var 3': { 'client_filters': [{'name': 'L2_DIRECTIONAL_FILTER','params': {'window_size': 3, 'std_dev_multiplier': 1.5, 'min_rounds_history': 3}}],'aggregation_strategy': {'name': 'FED_AVG'},'global_model_filter': {'name': 'L2_GLOBAL_MODEL_FILTER','params': {'window_size': 3, 'std_dev_multiplier': 1.5, 'min_rounds_history': 3}}},
        #     # 'var 4': { 'client_filters': [{'name': 'L2_DIRECTIONAL_FILTER','params': {'window_size': 7, 'std_dev_multiplier': 1.7, 'min_rounds_history': 7}}],'aggregation_strategy': {'name': 'FED_AVG'},'global_model_filter': {'name': 'L2_GLOBAL_MODEL_FILTER','params': {'window_size': 7, 'std_dev_multiplier': 1.7, 'min_rounds_history': 7}}},
        #     # 'var 5': { 'client_filters': [{'name': 'L2_DIRECTIONAL_FILTER','params': {'window_size': 5, 'std_dev_multiplier': 1.7, 'min_rounds_history': 5}}],'aggregation_strategy': {'name': 'FED_AVG'},'global_model_filter': {'name': 'L2_GLOBAL_MODEL_FILTER','params': {'window_size': 5, 'std_dev_multiplier': 1.7, 'min_rounds_history': 5}}},
        #     # 'var 6': { 'client_filters': [{'name': 'L2_DIRECTIONAL_FILTER','params': {'window_size': 3, 'std_dev_multiplier': 1.7, 'min_rounds_history': 3}}],'aggregation_strategy': {'name': 'FED_AVG'},'global_model_filter': {'name': 'L2_GLOBAL_MODEL_FILTER','params': {'window_size': 3, 'std_dev_multiplier': 1.7, 'min_rounds_history': 3}}}
        # }
        self.defense_pipelines = {
            # --- GRUPO 1: Baselines (Sem Filtros de Cliente) ---
            # Objetivo: Medir a performance base e o efeito de agregadores robustos.

            'M√©dia Ponderada (Baseline)': {
                'client_filters': [],
                'aggregation_strategy': {'name': 'FED_AVG', 'params': {}},
                'global_model_filter': None
            },
            'M√©dia Aparada': {
                'client_filters': [],
                'aggregation_strategy': {'name': 'TRIMMED_MEAN', 'params': {'trim_ratio': 0.4}},
                'global_model_filter': None
            },

            # --- GRUPO 2: Filtros de Cliente + Agrega√ß√£o Padr√£o ---
            # Objetivo: Isolar e medir a efic√°cia de cada filtro de cliente.

            'Filtro Krum + M√©dia Ponderada': {
                'client_filters': [{'name': 'KRUM', 'params': {}}],
                'aggregation_strategy': {'name': 'FED_AVG'},
                'global_model_filter': None
            },
            'Filtro Multi-Krum + M√©dia Ponderada': {
                'client_filters': [{'name': 'MULTI_KRUM', 'params': {}}],
                'aggregation_strategy': {'name': 'FED_AVG'},
                'global_model_filter': None
            },
            'Filtro Clustering + M√©dia Ponderada': {
                'client_filters': [{'name': 'CLUSTERING', 'params': {}}],
                'aggregation_strategy': {'name': 'FED_AVG'},
                'global_model_filter': None
            },
            'Filtro L2 Direcional + M√©dia Ponderada': {
                'client_filters': [{
                    'name': 'L2_DIRECTIONAL_FILTER',
                    'params': {'window_size': 3, 'std_dev_multiplier': 1.5, 'min_rounds_history': 3}
                }],
                'aggregation_strategy': {'name': 'FED_AVG'},
                'global_model_filter': None
            },

            # --- GRUPO 3: Pipelines de Defesa em M√∫ltiplas Camadas ---
            # Objetivo: Testar o efeito combinado de diferentes tipos de filtros e agregadores.

            'M√©dia Ponderada + Filtro L2 Global': {
                'client_filters': [],
                'aggregation_strategy': {'name': 'FED_AVG'},
                'global_model_filter': {
                    'name': 'L2_GLOBAL_MODEL_FILTER',
                    'params': {'window_size': 3, 'std_dev_multiplier': 1.5, 'min_rounds_history': 3}
                }
            },
            'Filtro L2 Direcional + M√©dia Ponderada + Filtro L2 Global': {
                'client_filters': [{
                    'name': 'L2_DIRECTIONAL_FILTER',
                    'params': {'window_size': 3, 'std_dev_multiplier': 1.5, 'min_rounds_history': 3}
                }],
                'aggregation_strategy': {'name': 'FED_AVG'},
                'global_model_filter': {
                    'name': 'L2_GLOBAL_MODEL_FILTER',
                    'params': {'window_size': 3, 'std_dev_multiplier': 1.5, 'min_rounds_history': 3}
                }
            },
        }
        self.attack_rates = [0.0, 0.2, 0.4, 0.6, 0.8]
        self.selection_fractions = [0.4, 1.0]
        self.rounds = 30
        self.num_clients = 15
        self.local_epochs = 2
        self.batch_size = 16
        self.seed = 42

        self.save_client_models = False
        self.save_server_intermediate_models = False

        if resume_dir:
            self.base_dir = Path(resume_dir)
            print(f"üîÑ Retomando simula√ß√£o no diret√≥rio: {self.base_dir}")
        else:
            self.base_dir = Path(f'simulation_{datetime.now().strftime("%Y%m%d_%H%M%S")}')
            print(f"üÜï Iniciando nova simula√ß√£o em: {self.base_dir}")
        
        self.config_dir = self.base_dir / 'config'
        self.results_dir = self.base_dir / 'results'
        self.config_dir.mkdir(parents=True, exist_ok=True)
        self.results_dir.mkdir(parents=True, exist_ok=True)
        
        self.existing_exp_names = set()
        print(f"üöÄ Runner iniciado. Sa√≠da ser√° salva em: {self.base_dir}")

    def load_existing_results(self):
        """Varre o diret√≥rio de resultados para encontrar experimentos j√° conclu√≠dos."""
        print("\nüîç Verificando experimentos j√° conclu√≠dos...")
        if not self.results_dir.exists() or not any(self.results_dir.iterdir()):
            print("‚úÖ Nenhum resultado existente encontrado.")
            return

        analyzer = ResultAnalyzer(self.base_dir)
        if analyzer.load_results():
            self.existing_exp_names = set(analyzer.all_results.keys())
        print(f"‚úÖ Encontrados {len(self.existing_exp_names)} resultados existentes.")

    def generate_all_configs(self):
        """Gera um dicion√°rio com todas as configura√ß√µes de experimentos planejados."""
        planned_configs = {}
        for defense_name, defense_pipeline in self.defense_pipelines.items():
            for attack_rate in self.attack_rates:
                for sel_frac in self.selection_fractions:
                    attack_part = f"lf_{int(attack_rate*100)}" if attack_rate > 0 else "no_attack"
                    defense_part = slugify(defense_name)
                    sel_part = f"sel_{int(sel_frac*100)}"
                    exp_name = f"{attack_part}_{defense_part}_{sel_part}"

                    config = {
                        'experiment': {
                            'name': exp_name,
                            'defense_name': defense_name,
                            'description': f"{defense_name} vs {int(attack_rate*100)}% label flipping (sel: {int(sel_frac*100)}%)",
                            'seed': self.seed,
                            'rounds': self.rounds,
                            'output_dir': str(self.results_dir),
                            'log_level': 'info',
                            'save_client_models': self.save_client_models,
                            'save_server_intermediate_models': self.save_server_intermediate_models
                        },
                        'dataset': {'name': 'SIGN', 'non_iid': False},
                        'model': {'type': 'CNN_SIGN', 'local_epochs': self.local_epochs, 'batch_size': self.batch_size},
                        'server': {
                            'type': 'standard',
                            'address': '0.0.0.0:8000',
                            'defense_pipeline': defense_pipeline,
                            'selection_strategy': 'random',
                            'selection_fraction': sel_frac,
                            'evaluation_interval': 1,
                            'max_concurrent_clients': 3
                        },
                        'clients': {
                            'num_clients': self.num_clients,
                            'honest_client_type': 'standard',
                            'malicious_client_type': 'label_flipping' if attack_rate > 0 else None,
                            'malicious_percentage': attack_rate
                        }
                    }
                    planned_configs[exp_name] = config
        return planned_configs

    def estimate_time(self, configs):
        """Estima tempo total baseado em experi√™ncia anterior."""
        num_pending_experiments = len(configs)
        if num_pending_experiments == 0:
            return 0

        base_time_per_client_per_round = 7  # segundos (estimativa conservadora)

        avg_selection_fraction = np.mean(self.selection_fractions) if self.selection_fractions else 0
        avg_clients_per_round = self.num_clients * avg_selection_fraction
        avg_time_per_round = avg_clients_per_round * base_time_per_client_per_round
        avg_time_per_experiment = self.rounds * avg_time_per_round
        
        total_seconds = num_pending_experiments * avg_time_per_experiment
        hours = total_seconds / 3600
        
        print(f"‚è±Ô∏è  Estimativa de Tempo:")
        print(f"  - üìä {num_pending_experiments} experimentos pendentes")
        print(f"  - üîÑ {self.rounds} rounds por experimento")
        print(f"  - ‚è±Ô∏è  ~{avg_time_per_experiment/60:.1f} min por experimento (em m√©dia)")
        print(f"  - üïê Tempo total estimado: {hours:.1f} horas ({hours/24:.1f} dias)")
        
        if hours > 8:
            print(f"  - ‚ö†Ô∏è  A execu√ß√£o pode ser longa. Considere executar em partes ou usar uma m√°quina mais r√°pida.")
        
        return total_seconds
    
    def run_workflow(self):
        """Orquestra todo o fluxo: carrega, filtra, estima, executa e salva."""
        if not FLSimulator:
            print("‚ùå FLSimulator n√£o est√° dispon√≠vel. N√£o √© poss√≠vel executar experimentos.")
            return

        self.load_existing_results()
        
        planned_configs = self.generate_all_configs()

        print(f"{planned_configs.keys()}")  # DEBUG
        print(f"{self.existing_exp_names}")  # DEBUG
        
        pending_configs = {
            name: cfg for name, cfg in planned_configs.items()
            if name not in self.existing_exp_names
        }

        print(f"\nüìä Status da Simula√ß√£o:")
        print(f"  - {len(planned_configs)} experimentos planejados.")
        print(f"  - {len(self.existing_exp_names)} experimentos j√° conclu√≠dos.")
        print(f"  - {len(pending_configs)} experimentos pendentes para execu√ß√£o.")

        if not pending_configs:
            print("\nüéâ Todos os experimentos j√° foram conclu√≠dos!")
        else:
            self.estimate_time(pending_configs)
            
            response = input(f"\n‚ùì Deseja continuar com a execu√ß√£o dos {len(pending_configs)} experimentos pendentes? (y/N): ").lower().strip()
            if response != 'y':
                print("‚ùå Execu√ß√£o cancelada pelo usu√°rio.")
                return

            print(f"\nüöÄ Iniciando execu√ß√£o de {len(pending_configs)} experimentos...")
            start_time = time.time()
            
            for i, (name, config_data) in enumerate(pending_configs.items()):
                print(f"\n{'='*60}\nüî¨ Executando {i+1}/{len(pending_configs)}: {name}\n{'='*60}")
                
                config_path = self.config_dir / f"{name}.yaml"
                with open(config_path, 'w') as f:
                    yaml.dump(config_data, f, default_flow_style=False, sort_keys=False)
                
                try:
                    simulator = FLSimulator(str(config_path), use_threads=False)
                    simulator.run_simulation()

                    output_exp_dir = self.results_dir / name
                    malicious_file_path = output_exp_dir / 'malicious_clients.json'
                    with open(malicious_file_path, 'w') as f:
                        json.dump({'malicious_clients': simulator.malicious_indices}, f, indent=2)
                    print(f"üíæ √çndices de clientes maliciosos salvos em {malicious_file_path}")

                    print(f"‚úÖ Sucesso: {name}")
                except Exception as e:
                    print(f"‚ùå ERRO em {name}: {e}")
            
            total_time = time.time() - start_time
            print(f"\nüéâ Execu√ß√£o dos pendentes conclu√≠da em {total_time/60:.2f} minutos.")

        self.save_results_summary()

    def save_results_summary(self):
        """Cria ou atualiza o arquivo de resumo JSON com todos os resultados."""
        print("\nüíæ Salvando resumo final dos resultados...")
        analyzer = ResultAnalyzer(self.base_dir)
        analyzer.load_results() # Sempre varre para garantir que tem tudo

        if not analyzer.all_results:
            print("‚ö†Ô∏è Nenhum resultado encontrado para criar o resumo.")
            return

        summary_data = {
            'experiment_info': {
                'total_experiments': len(analyzer.all_results),
                'defenses': list(self.defense_pipelines.keys()),
                'attack_rates': self.attack_rates,
                'selection_fractions': self.selection_fractions,
                'rounds': self.rounds,
                'timestamp': datetime.now().isoformat()
            },
            'results': analyzer.all_results
        }
        
        summary_path = self.results_dir / 'complete_results.json'
        with open(summary_path, 'w') as f:
            json.dump(summary_data, f, indent=2, default=str)
        print(f"üìÑ Resumo atualizado salvo em: {summary_path}")


def main():
    parser = argparse.ArgumentParser(
        description="Script para executar e/ou analisar experimentos de defesas em FL.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        '--run',
        action='store_true',
        help='Modo Execu√ß√£o: Inicia uma nova simula√ß√£o do zero.'
    )
    group.add_argument(
        '--analyze_dir',
        type=str,
        metavar='PATH',
        help='Modo An√°lise: Caminho para uma simula√ß√£o para rodar apenas a an√°lise.\n'
             'Exemplo: --analyze_dir simulation_20250912_011458'
    )
    group.add_argument(
        '--resume_dir',
        type=str,
        metavar='PATH',
        help='Modo Execu√ß√£o (Retomar): Caminho para uma simula√ß√£o para continuar a execu√ß√£o.\n'
             'Exemplo: --resume_dir simulation_20250912_011458'
    )
    args = parser.parse_args()

    if args.analyze_dir:
        print("--- MODO DE AN√ÅLISE ATIVADO ---")
        analyzer = ResultAnalyzer(args.analyze_dir)
        analyzer.run_full_analysis()
    else:
        print("--- MODO DE EXECU√á√ÉO ATIVADO ---")
        # Se resume_dir for fornecido, ele continua. Se for --run, resume_dir √© None e inicia uma nova.
        runner = ExperimentRunner(resume_dir=args.resume_dir)
        runner.run_workflow()
        
        print("\n--- INICIANDO AN√ÅLISE DOS RESULTADOS FINAIS ---")
        analyzer = ResultAnalyzer(runner.base_dir)
        analyzer.run_full_analysis()


if __name__ == "__main__":
    main()